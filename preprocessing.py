
#coding
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import chardet

#importdataset 
#pemanggilan Dataset dengan nama nuclearWeaponStates.csv.csv.csv
dataset= pd.read_csv('nuclearWeaponStates.csv.csv.csv')
X = dataset.iloc[:,:-1].values
Y = dataset.iloc[:,-1].values
print(X)
print(Y)
[[1 'US' 'US' 16634.125 1945.53698630137 nan 6550 3830 0 0 2720 328.2
  2019 21439.0 2019 'USA' 15360.083333333336]
 [2 'Russia' 'RU' 18139.08333333333 1949.65753424658 4.12054794520554
  6490 4509 92 0 1889 146.7 2020 1657.0 2020 'SUN' 16671.125]
 [3 'UK' 'GB' 19270.041666666668 1952.75409836066 3.09656411408037 225 0
  0 0 225 67.5 2019 2744.0 2019 'GBR' 17175.041666666668]
 [4 'France' 'FR' 21959.041666666668 1960.1174863388 7.363387978142099
  300 60 0 0 240 67.0 2019 2771.0 2020 'FRA' 20766.041666666668]
 [5 'China' 'CN' 23666.04166666667 1964.7896174863397 4.67213114754099
  280 46 0 0 234 1427.6 2018 14140.0 2019 'CHN' 20202.041666666668]
 [6 'India' 'IN' 27167.04166666667 1974.37534246575 9.58572497941464 130
  48 38 44 0 1352.6 2018 2936.0 219 'IND' 22971.04166666667]
 [7 'Israel' 'IL' 29120.04166666667 1979.72328767123 5.347945205479389 80
  80 0 0 0 9.1 2020 390.656 2019 'ISR' 17967.041666666668]
 [8 'Pakistan' 'PK' 35943.083333333336 1998.40273972603
  18.679452054794602 150 72 78 0 0 207.8 2017 284.2 2019 'PAK'
  26318.04166666667]
 [9 'North Korea ' 'KP' 38999.083333333336 2006.7698630137
  8.36712328767112 20 20 0 0 0 25.5 2018 30.0 2017 'PRK'
  29221.04166666667]]
[1942.04931507 1945.63835616 1947.01917808 1956.84972678 1955.30684932
 1962.88767123 1949.18630137 1972.05191257 1980.        ]

#Menghilangkan  missing value
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
X[:, 1:3] = imputer.transform(X[:, 1:3])
#missing values = nilai data yang digunakan sebagai penanda bahwa nilai aslinya tidak ada 
#strategy : menggunakan rata-rata kolom mean bisa juga menggunakan median, most_frequent(modus) atau constant

print(X)
[[1 'US' 'US' 16634.125 1945.53698630137 nan 6550 3830 0 0 2720 328.2
  2019 21439.0 2019 'USA' 15360.083333333336]
 [2 'Russia' 'RU' 18139.08333333333 1949.65753424658 4.12054794520554
  6490 4509 92 0 1889 146.7 2020 1657.0 2020 'SUN' 16671.125]
 [3 'UK' 'GB' 19270.041666666668 1952.75409836066 3.09656411408037 225 0
  0 0 225 67.5 2019 2744.0 2019 'GBR' 17175.041666666668]
 [4 'France' 'FR' 21959.041666666668 1960.1174863388 7.363387978142099
  300 60 0 0 240 67.0 2019 2771.0 2020 'FRA' 20766.041666666668]
 [5 'China' 'CN' 23666.04166666667 1964.7896174863397 4.67213114754099
  280 46 0 0 234 1427.6 2018 14140.0 2019 'CHN' 20202.041666666668]
 [6 'India' 'IN' 27167.04166666667 1974.37534246575 9.58572497941464 130
  48 38 44 0 1352.6 2018 2936.0 219 'IND' 22971.04166666667]
 [7 'Israel' 'IL' 29120.04166666667 1979.72328767123 5.347945205479389 80
  80 0 0 0 9.1 2020 390.656 2019 'ISR' 17967.041666666668]
 [8 'Pakistan' 'PK' 35943.083333333336 1998.40273972603
  18.679452054794602 150 72 78 0 0 207.8 2017 284.2 2019 'PAK'
  26318.04166666667]
 [9 'North Korea ' 'KP' 38999.083333333336 2006.7698630137
  8.36712328767112 20 20 0 0 0 25.5 2018 30.0 2017 'PRK'
  29221.04166666667]]

#Enconding Data kategori(Atribut)
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
X = np.array(ct.fit_transform(X))
print(X)
[[1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 'US' 'US' 16634.125
  1945.53698630137 nan 6550 3830 0 0 2720 328.2 2019 21439.0 2019 'USA'
  15360.083333333336]
 [0.0 1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 'Russia' 'RU'
  18139.08333333333 1949.65753424658 4.12054794520554 6490 4509 92 0 1889
  146.7 2020 1657.0 2020 'SUN' 16671.125]
 [0.0 1.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 'UK' 'GB'
  19270.041666666668 1952.75409836066 3.09656411408037 225 0 0 0 225 67.5
  2019 2744.0 2019 'GBR' 17175.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 'France' 'FR'
  21959.041666666668 1960.1174863388 7.363387978142099 300 60 0 0 240
  67.0 2019 2771.0 2020 'FRA' 20766.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 'China' 'CN'
  23666.04166666667 1964.7896174863397 4.67213114754099 280 46 0 0 234
  1427.6 2018 14140.0 2019 'CHN' 20202.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 'India' 'IN'
  27167.04166666667 1974.37534246575 9.58572497941464 130 48 38 44 0
  1352.6 2018 2936.0 219 'IND' 22971.04166666667]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 'Israel' 'IL'
  29120.04166666667 1979.72328767123 5.347945205479389 80 80 0 0 0 9.1
  2020 390.656 2019 'ISR' 17967.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 'Pakistan' 'PK'
  35943.083333333336 1998.40273972603 18.679452054794602 150 72 78 0 0
  207.8 2017 284.2 2019 'PAK' 26318.04166666667]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 'North Korea ' 'KP'
  38999.083333333336 2006.7698630137 8.36712328767112 20 20 0 0 0 25.5
  2018 30.0 2017 'PRK' 29221.04166666667]]

#Encoding Data kategori(class/label)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(Y)

print(Y)
[1942.04931507 1945.63835616 1947.01917808 1956.84972678 1955.30684932
 1962.88767123 1949.18630137 1972.05191257 1980.        ]

#Membagi dataset ke dalam training set dan test set
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state =1)
print(X_train)
print(X_test)
print(Y_train)
print(Y_test)
[[0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 'Israel' 'IL'
  29120.04166666667 1979.72328767123 5.347945205479389 80 80 0 0 0 9.1
  2020 390.656 2019 'ISR' 17967.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 'Pakistan' 'PK'
  35943.083333333336 1998.40273972603 18.679452054794602 150 72 78 0 0
  207.8 2017 284.2 2019 'PAK' 26318.04166666667]
 [0.0 1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 'Russia' 'RU'
  18139.08333333333 1949.65753424658 4.12054794520554 6490 4509 92 0 1889
  146.7 2020 1657.0 2020 'SUN' 16671.125]
 [1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 'US' 'US' 16634.125
  1945.53698630137 nan 6550 3830 0 0 2720 328.2 2019 21439.0 2019 'USA'
  15360.083333333336]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 'China' 'CN'
  23666.04166666667 1964.7896174863397 4.67213114754099 280 46 0 0 234
  1427.6 2018 14140.0 2019 'CHN' 20202.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 'France' 'FR'
  21959.041666666668 1960.1174863388 7.363387978142099 300 60 0 0 240
  67.0 2019 2771.0 2020 'FRA' 20766.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 'India' 'IN'
  27167.04166666667 1974.37534246575 9.58572497941464 130 48 38 44 0
  1352.6 2018 2936.0 219 'IND' 22971.04166666667]]
[[0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 'North Korea ' 'KP'
  38999.083333333336 2006.7698630137 8.36712328767112 20 20 0 0 0 25.5
  2018 30.0 2017 'PRK' 29221.04166666667]
 [0.0 1.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 'UK' 'GB'
  19270.041666666668 1952.75409836066 3.09656411408037 225 0 0 0 225 67.5
  2019 2744.0 2019 'GBR' 17175.041666666668]]
[1949.18630137 1972.05191257 1945.63835616 1942.04931507 1955.30684932
 1956.84972678 1962.88767123]
[1980.         1947.01917808]

#Feature Scaling 
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:])
X_test[:, 3:] = sc.trasnform(X_test[:, 3:])

print(X_train)
print(X_test)
[[0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 'Israel' 'IL'
  29120.04166666667 1979.72328767123 5.347945205479389 80 80 0 0 0 9.1
  2020 390.656 2019 'ISR' 17967.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 'Pakistan' 'PK'
  35943.083333333336 1998.40273972603 18.679452054794602 150 72 78 0 0
  207.8 2017 284.2 2019 'PAK' 26318.04166666667]
 [0.0 1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 'Russia' 'RU'
  18139.08333333333 1949.65753424658 4.12054794520554 6490 4509 92 0 1889
  146.7 2020 1657.0 2020 'SUN' 16671.125]
 [1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 'US' 'US' 16634.125
  1945.53698630137 nan 6550 3830 0 0 2720 328.2 2019 21439.0 2019 'USA'
  15360.083333333336]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 'China' 'CN'
  23666.04166666667 1964.7896174863397 4.67213114754099 280 46 0 0 234
  1427.6 2018 14140.0 2019 'CHN' 20202.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 'France' 'FR'
  21959.041666666668 1960.1174863388 7.363387978142099 300 60 0 0 240
  67.0 2019 2771.0 2020 'FRA' 20766.041666666668]
 [0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 'India' 'IN'
  27167.04166666667 1974.37534246575 9.58572497941464 130 48 38 44 0
  1352.6 2018 2936.0 219 'IND' 22971.04166666667]]
[[0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 'North Korea ' 'KP'
  38999.083333333336 2006.7698630137 8.36712328767112 20 20 0 0 0 25.5
  2018 30.0 2017 'PRK' 29221.04166666667]
 [0.0 1.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 'UK' 'GB'
  19270.041666666668 1952.75409836066 3.09656411408037 225 0 0 0 225 67.5
  2019 2744.0 2019 'GBR' 17175.041666666668]]
